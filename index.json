[{"title":"Records","url":"https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/","summary":"\u003cp\u003eThe input file in this example \u003ccode\u003eLibrary.fs\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight wrap-code\" dir=\"auto\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e Example\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eopen\u003c/span\u003e Myriad.Plugins\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u0026lt;\u003c/span\u003eGenerator.Fields \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fields\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTest1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e one\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e int\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e two\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e three\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e four\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat32\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTest2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e one\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Test1\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e two\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn attribute is used by the fields plugin so that the code generator knows which parts of the input AST should be consumed by the plugin.  If you had several records and you only wanted the fields plugin to operate on \u003ccode\u003eTest1\u003c/code\u003e then the attribute would be used like in the example about to only apply \u003ccode\u003eGenerator.Fields\u003c/code\u003e to the \u003ccode\u003eTest1\u003c/code\u003e record.  Note, if you wanted a plugin that just processes the whole input then there is no need to provide such an attribute.  Myriad aims to be a library rather than a full framework that ties you to the mechanism used to input and generate code, its up to you how you generate the code, Myriad just aims to help to make this as painless and flexible as possible.\u003c/p\u003e"},{"title":"Discriminated Unions","url":"https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/","summary":"\u003cp\u003eThe input file in this example \u003ccode\u003eLibrary.fs\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight wrap-code\" dir=\"auto\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fsharp\" data-lang=\"fsharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e Example\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eopen\u003c/span\u003e Myriad.Plugins\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u0026lt;\u003c/span\u003eGenerator.DuCases \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dus\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCurrency\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e CAD\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e PLN\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e EUR\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e USD\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Custom \u003cspan style=\"color:#66d9ef\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn attribute is used by the plugin so that the code generator plugin knows which parts of the input AST are to be used by the plugin.  If you had several records and you only wanted the fields plugin to operate on \u003ccode\u003eCurrency\u003c/code\u003e then the attribute would be used like in the example about to only apply \u003ccode\u003eGenerator.DuCases\u003c/code\u003e to \u003ccode\u003eCurrency\u003c/code\u003e.  Note, if you wanted a plugin that just needs the whole input AST then there is no need to provide an input.  Myriad aims to be a library rather than a full framework that ties you to the mechanism used to input and generate code.\u003c/p\u003e"},{"title":"Lenses","url":"https://moiraesoftware.github.io/myriad/docs/plugins/lenses/","summary":"\u003cp\u003eMyriad can also generate \u003ca href=\"https://fsprojects.github.io/FSharpPlus/tutorial.html#Lens\" rel=\"external\" target=\"_blank\"\u003elenses\u003c/a\u003e for records and single-case discriminated unions.\nLens is a pair of a getter and a setter for one property of the type and allows, given the object, to get the value of the property or to update it creating a new object. The advantage of lenses is an ability to combine them to read or update nested fields of the object.\u003c/p\u003e\n\u003cp\u003eTo create lenses for your type, first annotate the type for which you want lenses to be generated with \u003ccode\u003eGenerator.Lenses\u003c/code\u003e attribute, note the \u0026ldquo;lens\u0026rdquo; parameter specifies which configuration key is used with the plugin, this is used to specify which namespace is generated via the \u003ccode\u003emyriad.toml\u003c/code\u003e configuration file:\u003c/p\u003e"},{"title":"Configuration And Plugins","url":"https://moiraesoftware.github.io/myriad/docs/tutorials/configuration/","summary":"\u003ch1 id=\"configuration\"\u003eConfiguration\u003c/h1\u003e\n\u003cp\u003eMyriad uses a configuration file called \u003ccode\u003emyriad.toml\u003c/code\u003e which uses the \u003ca href=\"https://toml.io/en/\" rel=\"external\" target=\"_blank\"\u003etoml format\u003c/a\u003e.  Myriad looks in the current directory fro this file but it can be configured by placing \u003ccode\u003eMyriadConfigFile\u003c/code\u003e in your project file like this:\u003c/p\u003e\n\u003cdiv class=\"highlight wrap-code\" dir=\"auto\"\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-msbuild\" data-lang=\"msbuild\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\n\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt;\n  \u0026lt;PropertyGroup\u0026gt;\n    \u0026lt;TargetFramework\u0026gt;net9.0\u0026lt;/TargetFramework\u0026gt;\n    \u0026lt;OutputType\u0026gt;Exe\u0026lt;/OutputType\u0026gt;\n    \u0026lt;MyriadConfigFile\u0026gt;myConfig.toml\u0026lt;/MyriadConfigFile\u0026gt;\n  \u0026lt;/PropertyGroup\u0026gt;\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe configuration section for the built in plugins is very simple, the configuration name or key is passed in by either the plugins generator attribute, in the case of the fields plugin:\u003c/p\u003e"},{"title":"Debugging","url":"https://moiraesoftware.github.io/myriad/docs/tutorials/debugging/","summary":"\u003ch1 id=\"debugging\"\u003eDebugging\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"#R-image-8a22c21c874da6b483a60fc83acf3c7c\" class=\"lightbox-link\"\u003e\u003cimg alt=\"Generator\" class=\"lazy lightbox figure-image\" loading=\"lazy\" src=\"/myriad/docs/tutorials/debugging/pexels-markus-spiske-965345.jpg\" style=\" height: auto; width: auto;\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox-back\" id=\"R-image-8a22c21c874da6b483a60fc83acf3c7c\"\u003e\u003cimg alt=\"Generator\" class=\"lazy lightbox lightbox-image\" loading=\"lazy\" src=\"/myriad/docs/tutorials/debugging/pexels-markus-spiske-965345.jpg\"\u003e\u003c/a\u003e\nTo debug Myriad, you can use the following two command line options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--verbose\u003c/code\u003e — write diagnostic logs out to standard out\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--wait-for-debugger\u003c/code\u003e — causes Myriad to wait for a debugger to attach to the Myriad process\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese can be triggered from msbuild by the \u003ccode\u003e\u0026lt;MyriadSdkVerboseOutput\u0026gt;true\u0026lt;/MyriadSdkVerboseOutput\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;MyriadSdkWaitForDebugger\u0026gt;true\u0026lt;/MyriadSdkWaitForDebugger\u0026gt;\u003c/code\u003e properties, respectively.\u003c/p\u003e"},{"title":"External Plugins","url":"https://moiraesoftware.github.io/myriad/docs/tutorials/external-plugins/","summary":"\u003ch1 id=\"using-external-plugins\"\u003eUsing external plugins\u003c/h1\u003e\n\u003cp\u003eTo consume external plugins that aren\u0026rsquo;t included in the \u003ccode\u003eMyriad.Plugins\u003c/code\u003e package, you must register them with Myriad. If you are using the CLI tool then the way to do this is by passing in the \u003ccode\u003e--plugin \u0026lt;path to dll\u0026gt;\u003c/code\u003e command-line argument. If you are using MSBuild then this can be done by adding to the \u003ccode\u003eMyriadSdkGenerator\u003c/code\u003e property to your project file:\u003c/p\u003e\n\u003cdiv class=\"highlight wrap-code\" dir=\"auto\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;ItemGroup\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;MyriadSdkGenerator\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eInclude=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;path to plugin dll\u0026gt;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ItemGroup\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor example, if you had a project layout like this:\u003c/p\u003e"},{"title":"External resources","url":"https://moiraesoftware.github.io/myriad/docs/external-resources/","summary":"\u003cp\u003e\u003ca href=\"#R-image-8471fe9b1c7b9ddb2b6d0c1fcec2988f\" class=\"lightbox-link\"\u003e\u003cimg alt=\"Generator\" class=\"lazy lightbox figure-image\" loading=\"lazy\" src=\"/myriad/docs/external-resources/pexels-mikhail-nilov-7662853.jpg\" style=\" height: auto; width: auto;\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox-back\" id=\"R-image-8471fe9b1c7b9ddb2b6d0c1fcec2988f\"\u003e\u003cimg alt=\"Generator\" class=\"lazy lightbox lightbox-image\" loading=\"lazy\" src=\"/myriad/docs/external-resources/pexels-mikhail-nilov-7662853.jpg\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere is currently an introduction to Myriad and a How to guide on creating a simple generator\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://7sharp9.github.io/fsharp/2019-04-24-applied-metaprogramming-with-myriad/\" rel=\"external\" target=\"_blank\"\u003eApplied Metaprogramming with Myriad and Falanx\u003c/a\u003e  - This is a video I made for my YouTube channel which covers some details on Myriad.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://7sharp9.github.io/fsharp/2019-11-06-myriad-intro/\" rel=\"external\" target=\"_blank\"\u003eMyriad Intro\u003c/a\u003e - This is a blog post I wrote around the time of Applied Metaprogramming with Myriad and Falanx which has details of making a generator that produces this simple module:\u003c/p\u003e"},{"title":"MSBuild usage","url":"https://moiraesoftware.github.io/myriad/docs/tutorials/msbuild-usage/","summary":"\u003ch1 id=\"msbuild-usage\"\u003eMSBuild usage\u003c/h1\u003e\n\u003cp\u003ePlugins for Myriad are supplied by simply including the nuget package in your project, the nuget infrastructure supplies the necessary MSBuild props and targets so that the plugin is used by Myriad automatically. Following the source for the fields plugin can be used as reference until more details about authoring plugins is created.\u003c/p\u003e\n\u003cp\u003eTo use Myriad via its MSBuild support you add the \u003ccode\u003eMyriad.Core\u003c/code\u003e and \u003ccode\u003eMyriad.Sdk\u003c/code\u003e package references:\u003c/p\u003e"},{"title":"Search","url":"https://moiraesoftware.github.io/myriad/search/","summary":""}]